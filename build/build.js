(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var AIR, BOARD_OFFSET_X, BOARD_OFFSET_Y, COLUMNS, EARTH, FIRE, FPS, HEIGHT, RATIO, ROWS, TEXTURES, TILES, TILE_HEIGHT, TILE_WIDTH, WATER, WIDTH, areAdjacents, board, bringDown, canvas, canvasRect, ctx, drawBoard, drawSelectedTile, drawTile, dt, generateBoard, getColumn, getIndex, getRow, horizontalMatch, mStep, match, merge, modifier, pick, previousTime, random, render, renderOptions, step, switchTiles, tick, tile1, tile2, update, verticalMatch, _ref,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

random = function(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
};

pick = function(choices) {
  return choices[random(0, choices.length - 1)];
};

merge = function() {
  var key, obj, sources, src, value, _i, _len;
  obj = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = sources.length; _i < _len; _i++) {
    src = sources[_i];
    for (key in src) {
      if (!__hasProp.call(src, key)) continue;
      value = src[key];
      obj[key] = value;
    }
  }
  return obj;
};

getColumn = function(index, columns) {
  return index % columns;
};

getRow = function(index, columns) {
  return Math.floor(index / columns);
};

getIndex = function(x, y, columns) {
  return y * columns + x;
};

horizontalMatch = function(board, index, columns) {
  var i, length, start, sum, x, y, _i, _j;
  sum = 0;
  length = board.length;
  x = getColumn(index, columns);
  y = getRow(index, columns);
  start = x - 1;
  if ((0 <= start && start < columns)) {
    for (i = _i = start; start <= 0 ? _i <= 0 : _i >= 0; i = start <= 0 ? ++_i : --_i) {
      if (board[y * columns + i] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  start = x + 1;
  if ((0 <= start && start < columns)) {
    for (i = _j = start; start <= columns ? _j < columns : _j > columns; i = start <= columns ? ++_j : --_j) {
      if (!(y * columns + start < length)) {
        break;
      }
      if (board[y * columns + i] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  return sum >= 2;
};

verticalMatch = function(board, index, columns, rows) {
  var i, length, start, sum, x, y, _i, _j;
  sum = 0;
  length = board.length;
  x = getColumn(index, columns);
  y = getRow(index, columns);
  start = y - 1;
  if ((0 <= y && y < rows)) {
    for (i = _i = start; start <= 0 ? _i <= 0 : _i >= 0; i = start <= 0 ? ++_i : --_i) {
      if (board[i * columns + x] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  start = y + 1;
  if ((0 <= y && y < rows)) {
    for (i = _j = start; start <= rows ? _j < rows : _j > rows; i = start <= rows ? ++_j : --_j) {
      if (!(start * columns + x < length)) {
        break;
      }
      if (board[i * columns + x] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  return sum >= 2;
};

match = function(board, index, columns, rows) {
  var horizontal, vertical;
  horizontal = horizontalMatch(board, index, columns);
  vertical = verticalMatch(board, index, columns, rows);
  return horizontal || vertical;
};

areAdjacents = function(tile1, tile2, columns) {
  var x1, x2, y1, y2, _i, _j, _ref, _ref1, _ref2, _ref3, _results, _results1;
  x1 = getColumn(tile1, columns);
  y1 = getRow(tile1, columns);
  x2 = getColumn(tile2, columns);
  y2 = getRow(tile2, columns);
  if (__indexOf.call((function() {
    _results = [];
    for (var _i = _ref = x2 - 1, _ref1 = x2 + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this), x1) < 0) {
    return false;
  }
  if (__indexOf.call((function() {
    _results1 = [];
    for (var _j = _ref2 = y2 - 1, _ref3 = y2 + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; _ref2 <= _ref3 ? _j++ : _j--){ _results1.push(_j); }
    return _results1;
  }).apply(this), y1) < 0) {
    return false;
  }
  if (x1 !== x2 && y1 !== y2) {
    return false;
  }
  return true;
};

drawBoard = function(board, columns, ctx, textures, options) {
  var i, _i, _ref, _ref1, _results;
  _results = [];
  for (i = _i = 0, _ref = board.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(drawTile(ctx, i, columns, (_ref1 = textures[board[i]]) != null ? _ref1 : '#000', options));
  }
  return _results;
};

drawTile = function(ctx, index, columns, color, options) {
  var borderColor, borderSize, offsetX, offsetY, tileHeight, tileWidth;
  borderColor = options.borderColor, borderSize = options.borderSize, offsetX = options.offsetX, offsetY = options.offsetY, tileWidth = options.tileWidth, tileHeight = options.tileHeight;
  ctx.fillStyle = color;
  ctx.fillRect(offsetX + getColumn(index, columns) * tileWidth, offsetY + getRow(index, columns) * tileHeight, tileWidth, tileHeight);
  ctx.lineWidth = borderSize;
  ctx.strokeStyle = borderColor;
  return ctx.strokeRect(offsetX + getColumn(index, columns) * tileWidth, offsetY + getRow(index, columns) * tileHeight, tileWidth, tileHeight);
};

drawSelectedTile = function(ctx, columns, tile, options) {
  if (tile != null) {
    return drawTile(ctx, tile, columns, 'rgba(0,0,0,0.5)', options);
  }
};

RATIO = 2;

WIDTH = 320 * RATIO;

HEIGHT = 480 * RATIO;

FPS = 60;

ROWS = 10;

COLUMNS = 8;

TILE_WIDTH = 32 * RATIO;

TILE_HEIGHT = 32 * RATIO;

BOARD_OFFSET_X = TILE_WIDTH;

BOARD_OFFSET_Y = TILE_HEIGHT * 4;

TILES = (_ref = [0, 1, 2, 3], AIR = _ref[0], EARTH = _ref[1], FIRE = _ref[2], WATER = _ref[3], _ref);

TEXTURES = ['#ddd', '#855', '#f55', '#69f'];

canvas = document.createElement('canvas');

canvas.width = WIDTH;

canvas.height = HEIGHT;

ctx = canvas.getContext('2d');

canvasRect = null;

document.body.appendChild(canvas);

generateBoard = function(columns, rows, tiles) {
  var board, i, size, _i;
  size = columns * rows;
  board = [];
  for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
    while (true) {
      board[i] = pick(tiles);
      if (!match(board, i, columns, rows)) {
        break;
      }
    }
  }
  return board;
};

tile1 = null;

tile2 = null;

switchTiles = function(board, first, second) {
  var _ref1;
  return _ref1 = [board[second], board[first]], board[first] = _ref1[0], board[second] = _ref1[1], _ref1;
};

canvas.addEventListener('click', function(e) {
  var clickX, clickY, first, index, second, x, y;
  if (canvasRect == null) {
    canvasRect = canvas.getBoundingClientRect();
  }
  clickX = e.clientX - canvasRect.left;
  clickY = e.clientY - canvasRect.top;
  x = Math.floor((clickX - BOARD_OFFSET_X) / TILE_WIDTH);
  y = Math.floor((clickY - BOARD_OFFSET_Y) / TILE_HEIGHT);
  if (!((0 <= x && x < COLUMNS))) {
    return;
  }
  if (!((0 <= y && y < ROWS))) {
    return;
  }
  index = getIndex(x, y, COLUMNS);
  if (tile1 === null) {
    tile1 = index;
  } else {
    tile2 = index;
  }
  if (!((tile1 != null) && (tile2 != null))) {
    return;
  }
  if (areAdjacents(tile1, tile2, COLUMNS)) {
    switchTiles(board, tile1, tile2);
    first = match(board, tile1, COLUMNS, ROWS);
    second = match(board, tile2, COLUMNS, ROWS);
    if (!(first || second)) {
      switchTiles(board, tile1, tile2);
    }
  }
  return tile1 = tile2 = null;
});

bringDown = function(board, columns, rows, tiles) {
  var i, next, x, y, _i, _j, _ref1, _ref2, _results;
  for (i = _i = _ref1 = board.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
    if (board[i] !== null) {
      continue;
    }
    x = getColumn(i, columns);
    y = getRow(i, columns);
    next = (y - 1) * columns + x;
    if ((0 <= next && next < board.length)) {
      switchTiles(board, i, next);
    }
  }
  _results = [];
  for (i = _j = 0, _ref2 = board.length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
    if (board[i] === null) {
      _results.push(board[i] = pick(tiles));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

board = generateBoard(COLUMNS, ROWS, TILES);

renderOptions = {
  borderColor: '#fff',
  borderSize: 3,
  offsetX: BOARD_OFFSET_X,
  offsetY: BOARD_OFFSET_Y,
  tileWidth: TILE_WIDTH,
  tileHeight: TILE_HEIGHT
};

update = function(dt) {
  var i, matches, _i, _j, _len, _ref1;
  matches = [];
  for (i = _i = 0, _ref1 = board.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
    if (match(board, i, COLUMNS, ROWS)) {
      matches.push(i);
    }
  }
  for (_j = 0, _len = matches.length; _j < _len; _j++) {
    i = matches[_j];
    board[i] = null;
  }
  return bringDown(board, COLUMNS, ROWS, TILES);
};

render = function() {
  drawBoard(board, COLUMNS, ctx, TEXTURES, renderOptions);
  return drawSelectedTile(ctx, COLUMNS, tile1, renderOptions);
};

step = 1 / FPS;

modifier = 1;

mStep = step * modifier;

dt = 0;

previousTime = new Date();

requestAnimationFrame(tick = function() {
  var currentTime;
  currentTime = new Date();
  dt += Math.min(1, (currentTime - previousTime) / 1000);
  previousTime = currentTime;
  while (dt > mStep) {
    update(step);
    dt -= mStep;
  }
  render();
  return requestAnimationFrame(tick);
});



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
